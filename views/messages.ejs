<!DOCTYPE html>
<html>
<head>
  <title>Messages - NTU NEST</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
  <div class="messages-container">
    <div class="messages-header">
      <a href="/home" class="back-link">&larr; 返回首页</a>
      <h2 class="messages-title">私信</h2>
    </div>

    <div class="messages-layout">
      <!-- 左侧：对话列表 -->
      <div class="conversations-panel">
        <div class="conversations-header">
          <h3>对话</h3>
          <button id="new-message-btn" class="btn-new-message">
            <i class="fas fa-plus"></i> 新建私信
          </button>
        </div>
        <div id="conversations-list" class="conversations-list">
          <div class="loading-message">加载中...</div>
        </div>
      </div>

      <!-- 右侧：消息内容 -->
      <div class="messages-panel">
        <div id="welcome-screen" class="welcome-screen">
          <div class="welcome-content">
            <i class="fas fa-envelope-open-text welcome-icon"></i>
            <h3>欢迎来到你的收件箱</h3>
            <p>选择一个对话开始聊天，或者点击"新建私信"发送第一封私信。</p>
          </div>
        </div>
        
        <div id="chat-area" class="chat-area" style="display: none;">
          <div class="chat-header">
            <div class="chat-user-info">
              <img id="chat-avatar" class="chat-avatar" src="/images/logo.jpg" alt="avatar">
              <span id="chat-username" class="chat-username"></span>
            </div>
          </div>
          
          <div id="messages-content" class="messages-content">
            <!-- Messages will be loaded here -->
          </div>
          
          <div class="message-input-area">
            <div class="message-input-container">
              <textarea id="message-input" placeholder="输入消息..." rows="2"></textarea>
              <button id="send-message-btn" class="btn-send-message">
                <i class="fas fa-paper-plane"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 新建私信模态框 -->
  <div id="new-message-modal" class="modal" style="display: none;">
    <div class="modal-content">
      <div class="modal-header">
        <h3>新建私信</h3>
        <button class="modal-close">&times;</button>
      </div>
      <div class="modal-body">
        <div class="form-group">
          <label>收件人用户名:</label>
          <input type="text" id="recipient-username" placeholder="输入用户名">
        </div>
        <div class="form-group">
          <label>消息内容:</label>
          <textarea id="new-message-content" placeholder="输入你的消息..." rows="4"></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button id="send-new-message-btn" class="btn-primary">发送</button>
        <button class="modal-cancel">取消</button>
      </div>
    </div>
  </div>

  <script>
    let currentConversationUser = null;
    let conversations = [];

    document.addEventListener('DOMContentLoaded', function() {
      loadConversations();
      bindEvents();
    });

    function bindEvents() {
      // 新建私信按钮
      document.getElementById('new-message-btn').addEventListener('click', () => {
        document.getElementById('new-message-modal').style.display = 'flex';
      });

      // 模态框关闭
      document.querySelectorAll('.modal-close, .modal-cancel').forEach(btn => {
        btn.addEventListener('click', () => {
          document.getElementById('new-message-modal').style.display = 'none';
          clearNewMessageForm();
        });
      });

      // 发送新消息
      document.getElementById('send-new-message-btn').addEventListener('click', sendNewMessage);

      // 发送消息
      document.getElementById('send-message-btn').addEventListener('click', sendMessage);

      // 回车发送消息
      document.getElementById('message-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
    }

    async function loadConversations() {
      try {
        console.log('Loading conversations...');
        const response = await fetch('/api/messages/conversations');
        const data = await response.json();
        
        console.log('Conversations API response:', data);
        
        if (response.ok) {
          conversations = data.conversations || [];
          console.log('Conversations loaded:', conversations);
          renderConversations();
        } else {
          console.error('Failed to load conversations:', data.error);
        }
      } catch (error) {
        console.error('Error loading conversations:', error);
      }
    }

    function renderConversations() {
      const container = document.getElementById('conversations-list');
      
      if (conversations.length === 0) {
        container.innerHTML = '<div class="no-conversations"><p>还没有对话</p><p>点击"新建私信"开始第一次对话</p></div>';
        return;
      }

      container.innerHTML = '';
      conversations.forEach(conv => {
        const convElement = document.createElement('div');
        convElement.className = 'conversation-item';
        convElement.setAttribute('data-user-id', conv.user_id);
        
        convElement.innerHTML = `
          <img class="conv-avatar" src="${conv.avatar || '/images/logo.jpg'}" alt="avatar" onerror="this.src='/images/logo.jpg'">
          <div class="conv-info">
            <div class="conv-username">${conv.username}</div>
            <div class="conv-last-message">${conv.last_message || '暂无消息'}</div>
          </div>
          <div class="conv-meta">
            <div class="conv-time">${formatTime(conv.last_message_time)}</div>
            ${conv.unread_count > 0 ? `<div class="unread-badge">${conv.unread_count}</div>` : ''}
          </div>
        `;

        convElement.addEventListener('click', () => openConversation(conv));
        container.appendChild(convElement);
      });
    }

    async function openConversation(conv) {
      currentConversationUser = conv;
      
      // 更新UI
      document.getElementById('welcome-screen').style.display = 'none';
      document.getElementById('chat-area').style.display = 'flex';
      document.getElementById('chat-avatar').src = conv.avatar || '/images/logo.jpg';
      document.getElementById('chat-username').textContent = conv.username;

      // 标记对话为已选中
      document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('active');
      });
      document.querySelector(`[data-user-id="${conv.user_id}"]`).classList.add('active');

      // 加载消息
      await loadMessages(conv.user_id);
    }

    async function loadMessages(userId) {
      try {
        console.log('Loading messages for user:', userId);
        const response = await fetch(`/api/messages/conversation/${userId}`);
        const data = await response.json();
        
        console.log('Messages API response:', data);
        
        if (response.ok) {
          console.log('Messages to render:', data.messages);
          renderMessages(data.messages || []);
        } else {
          console.error('Failed to load messages:', data.error);
        }
      } catch (error) {
        console.error('Error loading messages:', error);
      }
    }

    function renderMessages(messages) {
      const container = document.getElementById('messages-content');
      container.innerHTML = '';

      console.log('Rendering messages:', messages);

      if (!messages || messages.length === 0) {
        container.innerHTML = '<div class="no-messages">暂无消息</div>';
        return;
      }

      messages.forEach(msg => {
        console.log('Rendering message:', msg);
        const msgElement = document.createElement('div');
        msgElement.className = `message ${msg.is_sender ? 'sent' : 'received'}`;
        
        msgElement.innerHTML = `
          <div class="message-content">${msg.content}</div>
          <div class="message-time">${formatTime(msg.created_at)}</div>
        `;

        container.appendChild(msgElement);
      });

      // 滚动到底部
      container.scrollTop = container.scrollHeight;
    }

    async function sendMessage() {
      if (!currentConversationUser) return;
      
      const input = document.getElementById('message-input');
      const content = input.value.trim();
      
      if (!content) return;

      try {
        const response = await fetch('/api/messages/send', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            receiver_id: currentConversationUser.user_id,
            content: content
          })
        });

        const data = await response.json();
        
        if (response.ok) {
          input.value = '';
          await loadMessages(currentConversationUser.user_id);
          await loadConversations(); // 更新对话列表
        } else {
          alert(data.error || '发送失败');
        }
      } catch (error) {
        console.error('Error sending message:', error);
        alert('发送失败');
      }
    }

    async function sendNewMessage() {
      const username = document.getElementById('recipient-username').value.trim();
      const content = document.getElementById('new-message-content').value.trim();
      
      if (!username || !content) {
        alert('请填写收件人和消息内容');
        return;
      }

      try {
        const response = await fetch('/api/messages/send-to-username', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            username: username,
            content: content
          })
        });

        const data = await response.json();
        
        if (response.ok) {
          document.getElementById('new-message-modal').style.display = 'none';
          clearNewMessageForm();
          await loadConversations();
          
          // 打开新创建的对话
          const newConv = conversations.find(c => c.username === username);
          if (newConv) {
            await openConversation(newConv);
          }
        } else {
          alert(data.error || '发送失败');
        }
      } catch (error) {
        console.error('Error sending new message:', error);
        alert('发送失败');
      }
    }

    function clearNewMessageForm() {
      document.getElementById('recipient-username').value = '';
      document.getElementById('new-message-content').value = '';
    }

    function formatTime(timestamp) {
      if (!timestamp) return '';
      const date = new Date(timestamp);
      const now = new Date();
      const diff = now - date;
      
      if (diff < 60000) return '刚刚';
      if (diff < 3600000) return Math.floor(diff / 60000) + '分钟前';
      if (diff < 86400000) return Math.floor(diff / 3600000) + '小时前';
      if (diff < 604800000) return Math.floor(diff / 86400000) + '天前';
      
      return date.toLocaleDateString();
    }
  </script>
</body>
</html>
